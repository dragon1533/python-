数据类型
	整型
	浮点型
	布尔型

容器数据类型
	列表<class 'list'>
		有序集合
			语法为 [元素1, 元素2, ..., 元素n]
			list(range(n))
			推导式
				【0】*5
				【i  for i in range(5)】
			内容可改
				附加
					append
						追加
					extend
						拓展
				插入insert
					list.insert(index, obj) 在编号 index 位置插入 obj
				删除remove，pop
					list.remove(obj) 移除列表中某个值的第一个匹配项
						指定具体元素
					list.pop([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
						指定索引
					del var1[, var2 ……] 删除单个或多个对象。
				获取元素
					列表索引值从0开始，-1返回倒序第一个
					切片通用写法
						start : stop : step
					【 : 】
						复制列表中的所有元素（浅拷贝）
					浅拷贝
						A=B
					深拷贝
						A=[ : ]
				常用操作符
					等号==
						成员、成员位置
					连接+
						首位拼接
					重复*
						复制拼接
					成员关系in、not in 
				内置方法
					list.count(obj) 统计某个元素在列表中出现的次数
					list.index(x[, start[, end]]) 从列表中找出某个值第一个匹配项的索引位置
					list.reverse() 反向列表中元素
					list.sort(key=None, reverse=False) 对原列表进行排序
						reverse -- 排序规则，reverse = True 降序， reverse = False 升序（默认）
	元组<class 'tuple'>
		定义语法为：(元素1, 元素2, ..., 元素n)
		不可更改（元素赋值），可修改元素
			创建（，）
			索引indexing
			切片slicing
			操作符
				等号==
					成员、成员位置
				连接+
					首位拼接
				重复*
					复制拼接
				成员关系in、not in 
			内置方法
				计数count
					count('python') 是记录在元组 t 中该元素出现几次，显然是 1 次
				索引index
					index(10.31) 是找到该元素在元组 t 的索引，显然是 1
			解压元组
				一维元组
					左边括号
	字符串<class 'str'>
		二维元组
			元组结构
		字符串被定义为引号之间的字符集合
		转义字符
			\\	反斜杠符号
			\'	单引号
			\"	双引号
			\n	换行
			\t	横向制表符(TAB)
			\r	回车
		不可修改性
			切片
				从0开始，start ： end
					左开右闭
			内置方法
				capitalize() 将字符串的第一个字符转换为大写
				lower() 转换字符串中所有大写字符为小写。
				upper() 转换字符串中的小写字母为大写。
				swapcase() 将字符串中大写转换为小写，小写转换为大写
				count(str, beg= 0,end=len(string)) 返回str在 string 里面出现的次数，如果beg或者end指定则返回指定范围内str出现的次数
				endswith(suffix, beg=0, end=len(string)) 检查字符串是否以指定子字符串 suffix 结束
				startswith(substr, beg=0,end=len(string)) 检查字符串是否以指定子字符串 substr 开头
				find(str, beg=0, end=len(string)) 检测 str 是否包含在字符串中，返回开始的索引值，否则返回 -1。
				rfind(str, beg=0,end=len(string)) 类似于 find() 函数，不过是从右边开始查找
				isnumeric() 如果字符串中只包含数字字符，则返回 True，否则返回 False
				ljust(width[, fillchar])返回一个原字符串左对齐，并使用fillchar（默认空格）填充至长度width的新字符串。
				rjust(width[, fillchar])返回一个原字符串右对齐，并使用fillchar（默认空格）填充至长度width的新字符串
				lstrip([chars]) 截掉字符串左边的空格或指定字符。
				rstrip([chars]) 删除字符串末尾的空格或指定字符。
				strip([chars]) 在字符串上执行lstrip()和rstrip()
				partition(sub) 找到子字符串sub，把字符串分为一个三元组(pre_sub,sub,fol_sub)，如果字符串中不包含sub则返回('原字符串','','')。
				rpartition(sub)类似于partition()方法，不过是从右边开始查找
				replace(old, new [, max]) 把 将字符串中的old替换成new，如果max指定，则替换不超过max次
				split(str="", num) 不带参数默认是以空格为分隔符切片字符串，如果num参数有设置，则仅分隔num个子字符串，返回切片后的子字符串拼接的列表
				splitlines([keepends]) 按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数keepends为 False，不包含换行符，如果为 True，则保留换行符
				maketrans(intab, outtab) 创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。
				translate(table, deletechars="") 根据参数table给出的表，转换字符串的字符，要过滤掉的字符放到deletechars参数中
			格式化
				format
				符号
					%G	作用同%g，根据值的大小决定使用%f或%E
					%g	根据值的大小决定使用%f或%e
					%E	作用同%e，用科学计数法格式化浮点数
					%e	用科学计数法格式化浮点数
					%f	格式化浮点数字，可指定小数点后的精度
					%X	格式化无符号十六进制数（大写）
					%x	格式化无符号十六进制数
					%o	格式化无符号八进制数
					%d	格式化整数
					%r	格式化字符串，用rper()方法处理对象
					%s	格式化字符串，用str()方法处理对象
					%c	格式化字符及其ASCII码
				辅助指令
					m.n	m 是显示的最小总宽度,n 是小数点后的位数（如果可用的话）
					-	用作左对齐
					+	在正数前面显示加号( + )
					#	在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')
					0	显示的数字前面填充'0'而不是默认的空格
	字典<class 'dict'>
		唯一的映射类型，以关键词为索引（字符串或者数值），（字符串、元组、列表属于序列类型，以连续的整数为索引）
		字典是无序的键值对集合
			定义语法为 {元素1, 元素2, ..., 元素n}
				元素   键:值 (key:value)
					键互不相同
		创建字典
			通过字符串或者数值作为key
			通过构造函数dict来创建字典
		内置方法
			dict.fromkeys(seq[, value]) 用于创建一个新字典，以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值
			dict.keys()返回一个可迭代对象，可以使用 list() 来转换为列表，列表为字典中的所有键
			dict.values()返回一个迭代器，可以使用 list() 来转换为列表，列表为字典中的所有值
			dict.items()以列表返回可遍历的 (键, 值) 元组数组
			dict.get(key, default=None) 返回指定键的值，如果值不在字典中返回默认值
			dict.setdefault(key, default=None)和get()方法 类似, 如果键不存在于字典中，将会添加键并将值设为默认值。
			key in dict in 操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回true，否则返回false。而not in操作符刚好相反，如果键在字典 dict 里返回false，否则返回true
			dict.pop(key[,default])删除字典给定键 key 所对应的值，返回值为被删除的值。key 值必须给出。若key不存在，则返回 default 值。
			del dict[key] 删除字典给定键 key 所对应的值
			dict.popitem()随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出KeyError异常
			dict.clear()用于删除字典内所有元素
			dict.copy()返回一个字典的浅复制
			dict.update(dict2)把字典参数 dict2 的 key:value对 更新到字典 dict 里
	集合<class 'set'>
		无序 (unordered) 和唯一 (unique)
		创建
			直接把一堆元素用花括号括起来{元素1, 元素2, ..., 元素n}。
				重复元素在set中会被自动被过滤
			使用set(value)工厂函数，把列表或元组转换成集合
		访问
			len()內建函数得到集合的大小
			for把集合中的数据一个个读取出来
			in或not in判断一个元素是否在集合中已经存在
		内置方法
			set.add(elmnt)用于给集合添加元素
			set.update(set)用于修改当前集合，可以添加新的元素或集合到当前集合中
			set.remove(item) 用于移除集合中的指定元素
			set.discard(value) 用于移除指定的集合元素。remove() 方法在移除一个不存在的元素时会发生错误，而 discard() 方法不会
			set.pop() 用于随机移除一个元素
			set.intersection(set1, set2) 返回两个集合的交集。
			set1 & set2 返回两个集合的交集。
			set.intersection_update(set1, set2) 交集，在原始的集合上移除不重叠的元素
			set.union(set1, set2) 返回两个集合的并集。
			set1 | set2 返回两个集合的并集
			set.difference(set) 返回集合的差集。
			set1 - set2 返回集合的差集。
			set.difference_update(set) 集合的差集，直接在原来的集合中移除元素，没有返回值
			set.symmetric_difference(set)返回集合的异或。
			set1 ^ set2 返回集合的异或。
			set.symmetric_difference_update(set)移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中
			set.issubset(set)判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。
			set1 <= set2 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False
			set.issuperset(set)用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。
			set1 >= set2 判断集合是不是包含其他集合，如果是则返回 True，否则返回 False
			set.isdisjoint(set) 用于判断两个集合是不是不相交，如果是返回 True，否则返回 False
	序列
		序列类型包括字符串、列表、元组、集合和字典
		内置函数
			list(sub) 把一个可迭代对象转换为列表
			tuple(sub) 把一个可迭代对象转换为元组
			str(obj) 把obj对象转换为字符串
			len(s) 返回对象（字符、列表、元组等）长度或元素个数
			max(sub)返回序列或者参数集合中的最大值
			min(sub)返回序列或参数集合中的最小值
			sum(iterable[, start=0]) 返回序列iterable与可选参数start的总和
			sorted(iterable, key=None, reverse=False) 对所有可迭代的对象进行排序操作。
				iterable -- 可迭代对象。
				key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。
				reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。
				返回重新排序的列表。
			reversed(seq) 函数返回一个反转的迭代器。
				seq -- 要转换的序列，可以是 tuple, string, list 或 range
			enumerate(sequence, [start=0])
				用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中
			zip(iter1 [,iter2 [...]])
				用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。
				我们可以使用 list() 转换来输出列表。
				如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。
